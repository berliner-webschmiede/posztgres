
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';


/**
 * Model Attack
 */

export type Attack = {
  id: number
  title: string
  content: string | null
  published: boolean
  authorId: number | null
  fine: string
}

/**
 * Model Protection
 */

export type Protection = {
  id: number
  title: string
  content: string | null
  published: boolean
  authorId: number | null
}

/**
 * Model User
 */

export type User = {
  id: number
  email: string
  name: string | null
  bio: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Attacks
 * const attacks = await prisma.attack.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Attacks
   * const attacks = await prisma.attack.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.attack`: Exposes CRUD operations for the **Attack** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attacks
    * const attacks = await prisma.attack.findMany()
    * ```
    */
  get attack(): Prisma.AttackDelegate<GlobalReject>;

  /**
   * `prisma.protection`: Exposes CRUD operations for the **Protection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Protections
    * const protections = await prisma.protection.findMany()
    * ```
    */
  get protection(): Prisma.ProtectionDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.16.1
   * Query Engine version: 8b74ad57aaf2cc6c155f382a18a8e3ba95aceb03
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  /**
   * Allows creating `select` or `include` outside of the main statement
   * From https://github.com/prisma/prisma/issues/3372#issuecomment-762296484
   */

  type Cast<A1, A2> = A1 extends A2 ? A1 : A2;

  /**
   * `Exact` forces a type to comply by another type. It will need to be a subset
   * and must have exactly the same properties, no more, no less.
   */
  type Exact<A, W> = A & Cast<{
    [K in keyof A]: K extends keyof W ? A[K] : never
  }, W>;

  type Narrow<A, W = unknown> =
      A & {[K in keyof A]: NarrowAt<A, W, K>};

  type NarrowAt<A, W, K extends keyof A, AK = A[K], WK = Att<W, K>> =
      WK extends Widen<infer T> ? T :
      AK extends Narrowable ? AK & WK :
      Narrow<AK, WK>;

  type Att<O, K> = K extends keyof O ? O[K] : unknown;

  type Widen<A> = {[type]: A};

  type Narrowable =
  | string
  | number
  | bigint
  | boolean
  | [];

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<Narrow<S, V>, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Attack: 'Attack',
    Protection: 'Protection',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Attack
   */


  export type AggregateAttack = {
    count: AttackCountAggregateOutputType | null
    avg: AttackAvgAggregateOutputType | null
    sum: AttackSumAggregateOutputType | null
    min: AttackMinAggregateOutputType | null
    max: AttackMaxAggregateOutputType | null
  }

  export type AttackAvgAggregateOutputType = {
    id: number
    authorId: number | null
  }

  export type AttackSumAggregateOutputType = {
    id: number
    authorId: number | null
  }

  export type AttackMinAggregateOutputType = {
    id: number
    title: string | null
    content: string | null
    published: boolean | null
    authorId: number | null
    fine: string | null
  }

  export type AttackMaxAggregateOutputType = {
    id: number
    title: string | null
    content: string | null
    published: boolean | null
    authorId: number | null
    fine: string | null
  }

  export type AttackCountAggregateOutputType = {
    id: number
    title: number | null
    content: number | null
    published: number | null
    authorId: number | null
    fine: number | null
    _all: number
  }


  export type AttackAvgAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type AttackSumAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type AttackMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
    fine?: true
  }

  export type AttackMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
    fine?: true
  }

  export type AttackCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
    fine?: true
    _all?: true
  }

  export type AttackAggregateArgs = {
    /**
     * Filter which Attack to aggregate.
    **/
    where?: AttackWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Attacks to fetch.
    **/
    orderBy?: Enumerable<AttackOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: AttackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attacks from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attacks.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attacks
    **/
    count?: true | AttackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: AttackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: AttackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: AttackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: AttackMaxAggregateInputType
  }

  export type GetAttackAggregateType<T extends AttackAggregateArgs> = {
    [P in keyof T & keyof AggregateAttack]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttack[P]>
      : GetScalarType<T[P], AggregateAttack[P]>
  }



  export type AttackSelect = {
    id?: boolean
    title?: boolean
    content?: boolean
    published?: boolean
    author?: boolean | UserArgs
    authorId?: boolean
    fine?: boolean
    protections?: boolean | ProtectionFindManyArgs
  }

  export type AttackInclude = {
    author?: boolean | UserArgs
    protections?: boolean | ProtectionFindManyArgs
  }

  export type AttackGetPayload<
    S extends boolean | null | undefined | AttackArgs,
    U = keyof S
      > = S extends true
        ? Attack
    : S extends undefined
    ? never
    : S extends AttackArgs | AttackFindManyArgs
    ?'include' extends U
    ? Attack  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'author'
        ? UserGetPayload<S['include'][P]> | null :
        P extends 'protections'
        ? Array < ProtectionGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Attack ?Attack [P]
  : 
          P extends 'author'
        ? UserGetPayload<S['select'][P]> | null :
        P extends 'protections'
        ? Array < ProtectionGetPayload<S['select'][P]>>  : never
  } 
    : Attack
  : Attack


  type AttackCountArgs = Merge<
    Omit<AttackFindManyArgs, 'select' | 'include'> & {
      select?: AttackCountAggregateInputType | true
    }
  >

  export interface AttackDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Attack that matches the filter.
     * @param {AttackFindUniqueArgs} args - Arguments to find a Attack
     * @example
     * // Get one Attack
     * const attack = await prisma.attack.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AttackFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AttackFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Attack'> extends True ? CheckSelect<T, Prisma__AttackClient<Attack>, Prisma__AttackClient<AttackGetPayload<T>>> : CheckSelect<T, Prisma__AttackClient<Attack | null >, Prisma__AttackClient<AttackGetPayload<T> | null >>

    /**
     * Find the first Attack that matches the filter.
     * @param {AttackFindFirstArgs} args - Arguments to find a Attack
     * @example
     * // Get one Attack
     * const attack = await prisma.attack.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AttackFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AttackFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Attack'> extends True ? CheckSelect<T, Prisma__AttackClient<Attack>, Prisma__AttackClient<AttackGetPayload<T>>> : CheckSelect<T, Prisma__AttackClient<Attack | null >, Prisma__AttackClient<AttackGetPayload<T> | null >>

    /**
     * Find zero or more Attacks that matches the filter.
     * @param {AttackFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attacks
     * const attacks = await prisma.attack.findMany()
     * 
     * // Get first 10 Attacks
     * const attacks = await prisma.attack.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attackWithIdOnly = await prisma.attack.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AttackFindManyArgs>(
      args?: SelectSubset<T, AttackFindManyArgs>
    ): CheckSelect<T, Promise<Array<Attack>>, Promise<Array<AttackGetPayload<T>>>>

    /**
     * Create a Attack.
     * @param {AttackCreateArgs} args - Arguments to create a Attack.
     * @example
     * // Create one Attack
     * const Attack = await prisma.attack.create({
     *   data: {
     *     // ... data to create a Attack
     *   }
     * })
     * 
    **/
    create<T extends AttackCreateArgs>(
      args: SelectSubset<T, AttackCreateArgs>
    ): CheckSelect<T, Prisma__AttackClient<Attack>, Prisma__AttackClient<AttackGetPayload<T>>>

    /**
     * Delete a Attack.
     * @param {AttackDeleteArgs} args - Arguments to delete one Attack.
     * @example
     * // Delete one Attack
     * const Attack = await prisma.attack.delete({
     *   where: {
     *     // ... filter to delete one Attack
     *   }
     * })
     * 
    **/
    delete<T extends AttackDeleteArgs>(
      args: SelectSubset<T, AttackDeleteArgs>
    ): CheckSelect<T, Prisma__AttackClient<Attack>, Prisma__AttackClient<AttackGetPayload<T>>>

    /**
     * Update one Attack.
     * @param {AttackUpdateArgs} args - Arguments to update one Attack.
     * @example
     * // Update one Attack
     * const attack = await prisma.attack.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AttackUpdateArgs>(
      args: SelectSubset<T, AttackUpdateArgs>
    ): CheckSelect<T, Prisma__AttackClient<Attack>, Prisma__AttackClient<AttackGetPayload<T>>>

    /**
     * Delete zero or more Attacks.
     * @param {AttackDeleteManyArgs} args - Arguments to filter Attacks to delete.
     * @example
     * // Delete a few Attacks
     * const { count } = await prisma.attack.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AttackDeleteManyArgs>(
      args?: SelectSubset<T, AttackDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Attacks.
     * @param {AttackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attacks
     * const attack = await prisma.attack.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AttackUpdateManyArgs>(
      args: SelectSubset<T, AttackUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Attack.
     * @param {AttackUpsertArgs} args - Arguments to update or create a Attack.
     * @example
     * // Update or create a Attack
     * const attack = await prisma.attack.upsert({
     *   create: {
     *     // ... data to create a Attack
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attack we want to update
     *   }
     * })
    **/
    upsert<T extends AttackUpsertArgs>(
      args: SelectSubset<T, AttackUpsertArgs>
    ): CheckSelect<T, Prisma__AttackClient<Attack>, Prisma__AttackClient<AttackGetPayload<T>>>

    /**
     * Count the number of Attacks.
     * @param {AttackCountArgs} args - Arguments to filter Attacks to count.
     * @example
     * // Count the number of Attacks
     * const count = await prisma.attack.count({
     *   where: {
     *     // ... the filter for the Attacks we want to count
     *   }
     * })
    **/
    count<T extends AttackCountArgs>(
      args?: Subset<T, AttackCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attack.
     * @param {AttackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttackAggregateArgs>(args: Subset<T, AttackAggregateArgs>): Promise<GetAttackAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Attack.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AttackClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    protections<T extends ProtectionFindManyArgs = {}>(args?: Subset<T, ProtectionFindManyArgs>): CheckSelect<T, Promise<Array<Protection>>, Promise<Array<ProtectionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Attack findUnique
   */
  export type AttackFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Attack
    **/
    select?: AttackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AttackInclude | null
    /**
     * Throw an Error if a Attack can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Attack to fetch.
    **/
    where: AttackWhereUniqueInput
  }


  /**
   * Attack findFirst
   */
  export type AttackFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Attack
    **/
    select?: AttackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AttackInclude | null
    /**
     * Throw an Error if a Attack can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Attack to fetch.
    **/
    where?: AttackWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Attacks to fetch.
    **/
    orderBy?: Enumerable<AttackOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attacks.
    **/
    cursor?: AttackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attacks from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attacks.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Attacks.
    **/
    distinct?: Enumerable<AttackScalarFieldEnum>
  }


  /**
   * Attack findMany
   */
  export type AttackFindManyArgs = {
    /**
     * Select specific fields to fetch from the Attack
    **/
    select?: AttackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AttackInclude | null
    /**
     * Filter, which Attacks to fetch.
    **/
    where?: AttackWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Attacks to fetch.
    **/
    orderBy?: Enumerable<AttackOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attacks.
    **/
    cursor?: AttackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attacks from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attacks.
    **/
    skip?: number
    distinct?: Enumerable<AttackScalarFieldEnum>
  }


  /**
   * Attack create
   */
  export type AttackCreateArgs = {
    /**
     * Select specific fields to fetch from the Attack
    **/
    select?: AttackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AttackInclude | null
    /**
     * The data needed to create a Attack.
    **/
    data: XOR<AttackUncheckedCreateInput, AttackCreateInput>
  }


  /**
   * Attack update
   */
  export type AttackUpdateArgs = {
    /**
     * Select specific fields to fetch from the Attack
    **/
    select?: AttackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AttackInclude | null
    /**
     * The data needed to update a Attack.
    **/
    data: XOR<AttackUncheckedUpdateInput, AttackUpdateInput>
    /**
     * Choose, which Attack to update.
    **/
    where: AttackWhereUniqueInput
  }


  /**
   * Attack updateMany
   */
  export type AttackUpdateManyArgs = {
    data: XOR<AttackUncheckedUpdateManyInput, AttackUpdateManyMutationInput>
    where?: AttackWhereInput
  }


  /**
   * Attack upsert
   */
  export type AttackUpsertArgs = {
    /**
     * Select specific fields to fetch from the Attack
    **/
    select?: AttackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AttackInclude | null
    /**
     * The filter to search for the Attack to update in case it exists.
    **/
    where: AttackWhereUniqueInput
    /**
     * In case the Attack found by the `where` argument doesn't exist, create a new Attack with this data.
    **/
    create: XOR<AttackUncheckedCreateInput, AttackCreateInput>
    /**
     * In case the Attack was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<AttackUncheckedUpdateInput, AttackUpdateInput>
  }


  /**
   * Attack delete
   */
  export type AttackDeleteArgs = {
    /**
     * Select specific fields to fetch from the Attack
    **/
    select?: AttackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AttackInclude | null
    /**
     * Filter which Attack to delete.
    **/
    where: AttackWhereUniqueInput
  }


  /**
   * Attack deleteMany
   */
  export type AttackDeleteManyArgs = {
    where?: AttackWhereInput
  }


  /**
   * Attack without action
   */
  export type AttackArgs = {
    /**
     * Select specific fields to fetch from the Attack
    **/
    select?: AttackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AttackInclude | null
  }



  /**
   * Model Protection
   */


  export type AggregateProtection = {
    count: ProtectionCountAggregateOutputType | null
    avg: ProtectionAvgAggregateOutputType | null
    sum: ProtectionSumAggregateOutputType | null
    min: ProtectionMinAggregateOutputType | null
    max: ProtectionMaxAggregateOutputType | null
  }

  export type ProtectionAvgAggregateOutputType = {
    id: number
    authorId: number | null
  }

  export type ProtectionSumAggregateOutputType = {
    id: number
    authorId: number | null
  }

  export type ProtectionMinAggregateOutputType = {
    id: number
    title: string | null
    content: string | null
    published: boolean | null
    authorId: number | null
  }

  export type ProtectionMaxAggregateOutputType = {
    id: number
    title: string | null
    content: string | null
    published: boolean | null
    authorId: number | null
  }

  export type ProtectionCountAggregateOutputType = {
    id: number
    title: number | null
    content: number | null
    published: number | null
    authorId: number | null
    _all: number
  }


  export type ProtectionAvgAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type ProtectionSumAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type ProtectionMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
  }

  export type ProtectionMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
  }

  export type ProtectionCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    published?: true
    authorId?: true
    _all?: true
  }

  export type ProtectionAggregateArgs = {
    /**
     * Filter which Protection to aggregate.
    **/
    where?: ProtectionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Protections to fetch.
    **/
    orderBy?: Enumerable<ProtectionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ProtectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Protections from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Protections.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Protections
    **/
    count?: true | ProtectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ProtectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ProtectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ProtectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ProtectionMaxAggregateInputType
  }

  export type GetProtectionAggregateType<T extends ProtectionAggregateArgs> = {
    [P in keyof T & keyof AggregateProtection]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProtection[P]>
      : GetScalarType<T[P], AggregateProtection[P]>
  }



  export type ProtectionSelect = {
    id?: boolean
    title?: boolean
    content?: boolean
    published?: boolean
    author?: boolean | UserArgs
    authorId?: boolean
    attacks?: boolean | AttackFindManyArgs
  }

  export type ProtectionInclude = {
    author?: boolean | UserArgs
    attacks?: boolean | AttackFindManyArgs
  }

  export type ProtectionGetPayload<
    S extends boolean | null | undefined | ProtectionArgs,
    U = keyof S
      > = S extends true
        ? Protection
    : S extends undefined
    ? never
    : S extends ProtectionArgs | ProtectionFindManyArgs
    ?'include' extends U
    ? Protection  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'author'
        ? UserGetPayload<S['include'][P]> | null :
        P extends 'attacks'
        ? Array < AttackGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Protection ?Protection [P]
  : 
          P extends 'author'
        ? UserGetPayload<S['select'][P]> | null :
        P extends 'attacks'
        ? Array < AttackGetPayload<S['select'][P]>>  : never
  } 
    : Protection
  : Protection


  type ProtectionCountArgs = Merge<
    Omit<ProtectionFindManyArgs, 'select' | 'include'> & {
      select?: ProtectionCountAggregateInputType | true
    }
  >

  export interface ProtectionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Protection that matches the filter.
     * @param {ProtectionFindUniqueArgs} args - Arguments to find a Protection
     * @example
     * // Get one Protection
     * const protection = await prisma.protection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProtectionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProtectionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Protection'> extends True ? CheckSelect<T, Prisma__ProtectionClient<Protection>, Prisma__ProtectionClient<ProtectionGetPayload<T>>> : CheckSelect<T, Prisma__ProtectionClient<Protection | null >, Prisma__ProtectionClient<ProtectionGetPayload<T> | null >>

    /**
     * Find the first Protection that matches the filter.
     * @param {ProtectionFindFirstArgs} args - Arguments to find a Protection
     * @example
     * // Get one Protection
     * const protection = await prisma.protection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProtectionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProtectionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Protection'> extends True ? CheckSelect<T, Prisma__ProtectionClient<Protection>, Prisma__ProtectionClient<ProtectionGetPayload<T>>> : CheckSelect<T, Prisma__ProtectionClient<Protection | null >, Prisma__ProtectionClient<ProtectionGetPayload<T> | null >>

    /**
     * Find zero or more Protections that matches the filter.
     * @param {ProtectionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Protections
     * const protections = await prisma.protection.findMany()
     * 
     * // Get first 10 Protections
     * const protections = await prisma.protection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const protectionWithIdOnly = await prisma.protection.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProtectionFindManyArgs>(
      args?: SelectSubset<T, ProtectionFindManyArgs>
    ): CheckSelect<T, Promise<Array<Protection>>, Promise<Array<ProtectionGetPayload<T>>>>

    /**
     * Create a Protection.
     * @param {ProtectionCreateArgs} args - Arguments to create a Protection.
     * @example
     * // Create one Protection
     * const Protection = await prisma.protection.create({
     *   data: {
     *     // ... data to create a Protection
     *   }
     * })
     * 
    **/
    create<T extends ProtectionCreateArgs>(
      args: SelectSubset<T, ProtectionCreateArgs>
    ): CheckSelect<T, Prisma__ProtectionClient<Protection>, Prisma__ProtectionClient<ProtectionGetPayload<T>>>

    /**
     * Delete a Protection.
     * @param {ProtectionDeleteArgs} args - Arguments to delete one Protection.
     * @example
     * // Delete one Protection
     * const Protection = await prisma.protection.delete({
     *   where: {
     *     // ... filter to delete one Protection
     *   }
     * })
     * 
    **/
    delete<T extends ProtectionDeleteArgs>(
      args: SelectSubset<T, ProtectionDeleteArgs>
    ): CheckSelect<T, Prisma__ProtectionClient<Protection>, Prisma__ProtectionClient<ProtectionGetPayload<T>>>

    /**
     * Update one Protection.
     * @param {ProtectionUpdateArgs} args - Arguments to update one Protection.
     * @example
     * // Update one Protection
     * const protection = await prisma.protection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProtectionUpdateArgs>(
      args: SelectSubset<T, ProtectionUpdateArgs>
    ): CheckSelect<T, Prisma__ProtectionClient<Protection>, Prisma__ProtectionClient<ProtectionGetPayload<T>>>

    /**
     * Delete zero or more Protections.
     * @param {ProtectionDeleteManyArgs} args - Arguments to filter Protections to delete.
     * @example
     * // Delete a few Protections
     * const { count } = await prisma.protection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProtectionDeleteManyArgs>(
      args?: SelectSubset<T, ProtectionDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Protections.
     * @param {ProtectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Protections
     * const protection = await prisma.protection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProtectionUpdateManyArgs>(
      args: SelectSubset<T, ProtectionUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Protection.
     * @param {ProtectionUpsertArgs} args - Arguments to update or create a Protection.
     * @example
     * // Update or create a Protection
     * const protection = await prisma.protection.upsert({
     *   create: {
     *     // ... data to create a Protection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Protection we want to update
     *   }
     * })
    **/
    upsert<T extends ProtectionUpsertArgs>(
      args: SelectSubset<T, ProtectionUpsertArgs>
    ): CheckSelect<T, Prisma__ProtectionClient<Protection>, Prisma__ProtectionClient<ProtectionGetPayload<T>>>

    /**
     * Count the number of Protections.
     * @param {ProtectionCountArgs} args - Arguments to filter Protections to count.
     * @example
     * // Count the number of Protections
     * const count = await prisma.protection.count({
     *   where: {
     *     // ... the filter for the Protections we want to count
     *   }
     * })
    **/
    count<T extends ProtectionCountArgs>(
      args?: Subset<T, ProtectionCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProtectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Protection.
     * @param {ProtectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProtectionAggregateArgs>(args: Subset<T, ProtectionAggregateArgs>): Promise<GetProtectionAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Protection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProtectionClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    attacks<T extends AttackFindManyArgs = {}>(args?: Subset<T, AttackFindManyArgs>): CheckSelect<T, Promise<Array<Attack>>, Promise<Array<AttackGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Protection findUnique
   */
  export type ProtectionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Protection
    **/
    select?: ProtectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProtectionInclude | null
    /**
     * Throw an Error if a Protection can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Protection to fetch.
    **/
    where: ProtectionWhereUniqueInput
  }


  /**
   * Protection findFirst
   */
  export type ProtectionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Protection
    **/
    select?: ProtectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProtectionInclude | null
    /**
     * Throw an Error if a Protection can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Protection to fetch.
    **/
    where?: ProtectionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Protections to fetch.
    **/
    orderBy?: Enumerable<ProtectionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Protections.
    **/
    cursor?: ProtectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Protections from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Protections.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Protections.
    **/
    distinct?: Enumerable<ProtectionScalarFieldEnum>
  }


  /**
   * Protection findMany
   */
  export type ProtectionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Protection
    **/
    select?: ProtectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProtectionInclude | null
    /**
     * Filter, which Protections to fetch.
    **/
    where?: ProtectionWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Protections to fetch.
    **/
    orderBy?: Enumerable<ProtectionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Protections.
    **/
    cursor?: ProtectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Protections from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Protections.
    **/
    skip?: number
    distinct?: Enumerable<ProtectionScalarFieldEnum>
  }


  /**
   * Protection create
   */
  export type ProtectionCreateArgs = {
    /**
     * Select specific fields to fetch from the Protection
    **/
    select?: ProtectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProtectionInclude | null
    /**
     * The data needed to create a Protection.
    **/
    data: XOR<ProtectionUncheckedCreateInput, ProtectionCreateInput>
  }


  /**
   * Protection update
   */
  export type ProtectionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Protection
    **/
    select?: ProtectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProtectionInclude | null
    /**
     * The data needed to update a Protection.
    **/
    data: XOR<ProtectionUncheckedUpdateInput, ProtectionUpdateInput>
    /**
     * Choose, which Protection to update.
    **/
    where: ProtectionWhereUniqueInput
  }


  /**
   * Protection updateMany
   */
  export type ProtectionUpdateManyArgs = {
    data: XOR<ProtectionUncheckedUpdateManyInput, ProtectionUpdateManyMutationInput>
    where?: ProtectionWhereInput
  }


  /**
   * Protection upsert
   */
  export type ProtectionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Protection
    **/
    select?: ProtectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProtectionInclude | null
    /**
     * The filter to search for the Protection to update in case it exists.
    **/
    where: ProtectionWhereUniqueInput
    /**
     * In case the Protection found by the `where` argument doesn't exist, create a new Protection with this data.
    **/
    create: XOR<ProtectionUncheckedCreateInput, ProtectionCreateInput>
    /**
     * In case the Protection was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ProtectionUncheckedUpdateInput, ProtectionUpdateInput>
  }


  /**
   * Protection delete
   */
  export type ProtectionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Protection
    **/
    select?: ProtectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProtectionInclude | null
    /**
     * Filter which Protection to delete.
    **/
    where: ProtectionWhereUniqueInput
  }


  /**
   * Protection deleteMany
   */
  export type ProtectionDeleteManyArgs = {
    where?: ProtectionWhereInput
  }


  /**
   * Protection without action
   */
  export type ProtectionArgs = {
    /**
     * Select specific fields to fetch from the Protection
    **/
    select?: ProtectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProtectionInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
  }

  export type UserSumAggregateOutputType = {
    id: number
  }

  export type UserMinAggregateOutputType = {
    id: number
    email: string | null
    name: string | null
    bio: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number
    email: string | null
    name: string | null
    bio: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number | null
    name: number | null
    bio: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    bio?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    bio?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    bio?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }



  export type UserSelect = {
    id?: boolean
    email?: boolean
    name?: boolean
    bio?: boolean
    attacks?: boolean | AttackFindManyArgs
    protections?: boolean | ProtectionFindManyArgs
  }

  export type UserInclude = {
    attacks?: boolean | AttackFindManyArgs
    protections?: boolean | ProtectionFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'attacks'
        ? Array < AttackGetPayload<S['include'][P]>>  :
        P extends 'protections'
        ? Array < ProtectionGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'attacks'
        ? Array < AttackGetPayload<S['select'][P]>>  :
        P extends 'protections'
        ? Array < ProtectionGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Users.
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Promise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    attacks<T extends AttackFindManyArgs = {}>(args?: Subset<T, AttackFindManyArgs>): CheckSelect<T, Promise<Array<Attack>>, Promise<Array<AttackGetPayload<T>>>>;

    protections<T extends ProtectionFindManyArgs = {}>(args?: Subset<T, ProtectionFindManyArgs>): CheckSelect<T, Promise<Array<Protection>>, Promise<Array<ProtectionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: XOR<UserUncheckedCreateInput, UserCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: XOR<UserUncheckedUpdateInput, UserUpdateInput>
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUncheckedUpdateManyInput, UserUpdateManyMutationInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: XOR<UserUncheckedCreateInput, UserCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserUncheckedUpdateInput, UserUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AttackScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    published: 'published',
    authorId: 'authorId',
    fine: 'fine'
  };

  export type AttackScalarFieldEnum = (typeof AttackScalarFieldEnum)[keyof typeof AttackScalarFieldEnum]


  export const ProtectionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    published: 'published',
    authorId: 'authorId'
  };

  export type ProtectionScalarFieldEnum = (typeof ProtectionScalarFieldEnum)[keyof typeof ProtectionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    bio: 'bio'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type AttackWhereInput = {
    AND?: Enumerable<AttackWhereInput>
    OR?: Enumerable<AttackWhereInput>
    NOT?: Enumerable<AttackWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    content?: StringNullableFilter | string | null
    published?: BoolFilter | boolean
    author?: XOR<UserWhereInput, UserRelationFilter> | null
    authorId?: IntNullableFilter | number | null
    fine?: StringFilter | string
    protections?: ProtectionListRelationFilter
  }

  export type AttackOrderByInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    author?: UserOrderByInput
    authorId?: SortOrder
    fine?: SortOrder
  }

  export type AttackWhereUniqueInput = {
    id?: number
  }

  export type ProtectionWhereInput = {
    AND?: Enumerable<ProtectionWhereInput>
    OR?: Enumerable<ProtectionWhereInput>
    NOT?: Enumerable<ProtectionWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    content?: StringNullableFilter | string | null
    published?: BoolFilter | boolean
    author?: XOR<UserWhereInput, UserRelationFilter> | null
    authorId?: IntNullableFilter | number | null
    attacks?: AttackListRelationFilter
  }

  export type ProtectionOrderByInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    author?: UserOrderByInput
    authorId?: SortOrder
  }

  export type ProtectionWhereUniqueInput = {
    id?: number
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    bio?: StringNullableFilter | string | null
    attacks?: AttackListRelationFilter
    protections?: ProtectionListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    bio?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type AttackCreateInput = {
    title: string
    content?: string | null
    published?: boolean
    fine: string
    author?: UserCreateNestedOneWithoutAttacksInput
    protections?: ProtectionCreateNestedManyWithoutAttacksInput
  }

  export type AttackUncheckedCreateInput = {
    id?: number
    title: string
    content?: string | null
    published?: boolean
    authorId?: number | null
    fine: string
  }

  export type AttackUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    fine?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneWithoutAttacksInput
    protections?: ProtectionUpdateManyWithoutAttacksInput
  }

  export type AttackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
    fine?: StringFieldUpdateOperationsInput | string
  }

  export type AttackUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    fine?: StringFieldUpdateOperationsInput | string
  }

  export type AttackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
    fine?: StringFieldUpdateOperationsInput | string
  }

  export type ProtectionCreateInput = {
    title: string
    content?: string | null
    published?: boolean
    author?: UserCreateNestedOneWithoutProtectionsInput
    attacks?: AttackCreateNestedManyWithoutProtectionsInput
  }

  export type ProtectionUncheckedCreateInput = {
    id?: number
    title: string
    content?: string | null
    published?: boolean
    authorId?: number | null
  }

  export type ProtectionUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneWithoutProtectionsInput
    attacks?: AttackUpdateManyWithoutProtectionsInput
  }

  export type ProtectionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProtectionUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProtectionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateInput = {
    email: string
    name?: string | null
    bio?: string | null
    attacks?: AttackCreateNestedManyWithoutAuthorInput
    protections?: ProtectionCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name?: string | null
    bio?: string | null
    attacks?: AttackUncheckedCreateNestedManyWithoutAuthorInput
    protections?: ProtectionUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    attacks?: AttackUpdateManyWithoutAuthorInput
    protections?: ProtectionUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    attacks?: AttackUncheckedUpdateManyWithoutAuthorInput
    protections?: ProtectionUncheckedUpdateManyWithoutAuthorInput
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ProtectionListRelationFilter = {
    every?: ProtectionWhereInput
    some?: ProtectionWhereInput
    none?: ProtectionWhereInput
  }

  export type AttackListRelationFilter = {
    every?: AttackWhereInput
    some?: AttackWhereInput
    none?: AttackWhereInput
  }

  export type UserCreateNestedOneWithoutAttacksInput = {
    create?: XOR<UserUncheckedCreateWithoutAttacksInput, UserCreateWithoutAttacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutattacksInput
    connect?: UserWhereUniqueInput
  }

  export type ProtectionCreateNestedManyWithoutAttacksInput = {
    create?: XOR<Enumerable<ProtectionUncheckedCreateWithoutAttacksInput>, Enumerable<ProtectionCreateWithoutAttacksInput>>
    connectOrCreate?: Enumerable<ProtectionCreateOrConnectWithoutattacksInput>
    connect?: Enumerable<ProtectionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneWithoutAttacksInput = {
    create?: XOR<UserUncheckedCreateWithoutAttacksInput, UserCreateWithoutAttacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutattacksInput
    upsert?: UserUpsertWithoutAttacksInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserUncheckedUpdateWithoutAttacksInput, UserUpdateWithoutAttacksInput>
  }

  export type ProtectionUpdateManyWithoutAttacksInput = {
    create?: XOR<Enumerable<ProtectionUncheckedCreateWithoutAttacksInput>, Enumerable<ProtectionCreateWithoutAttacksInput>>
    connectOrCreate?: Enumerable<ProtectionCreateOrConnectWithoutattacksInput>
    upsert?: Enumerable<ProtectionUpsertWithWhereUniqueWithoutAttacksInput>
    connect?: Enumerable<ProtectionWhereUniqueInput>
    set?: Enumerable<ProtectionWhereUniqueInput>
    disconnect?: Enumerable<ProtectionWhereUniqueInput>
    delete?: Enumerable<ProtectionWhereUniqueInput>
    update?: Enumerable<ProtectionUpdateWithWhereUniqueWithoutAttacksInput>
    updateMany?: Enumerable<ProtectionUpdateManyWithWhereWithoutAttacksInput>
    deleteMany?: Enumerable<ProtectionScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutProtectionsInput = {
    create?: XOR<UserUncheckedCreateWithoutProtectionsInput, UserCreateWithoutProtectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutprotectionsInput
    connect?: UserWhereUniqueInput
  }

  export type AttackCreateNestedManyWithoutProtectionsInput = {
    create?: XOR<Enumerable<AttackUncheckedCreateWithoutProtectionsInput>, Enumerable<AttackCreateWithoutProtectionsInput>>
    connectOrCreate?: Enumerable<AttackCreateOrConnectWithoutprotectionsInput>
    connect?: Enumerable<AttackWhereUniqueInput>
  }

  export type UserUpdateOneWithoutProtectionsInput = {
    create?: XOR<UserUncheckedCreateWithoutProtectionsInput, UserCreateWithoutProtectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutprotectionsInput
    upsert?: UserUpsertWithoutProtectionsInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserUncheckedUpdateWithoutProtectionsInput, UserUpdateWithoutProtectionsInput>
  }

  export type AttackUpdateManyWithoutProtectionsInput = {
    create?: XOR<Enumerable<AttackUncheckedCreateWithoutProtectionsInput>, Enumerable<AttackCreateWithoutProtectionsInput>>
    connectOrCreate?: Enumerable<AttackCreateOrConnectWithoutprotectionsInput>
    upsert?: Enumerable<AttackUpsertWithWhereUniqueWithoutProtectionsInput>
    connect?: Enumerable<AttackWhereUniqueInput>
    set?: Enumerable<AttackWhereUniqueInput>
    disconnect?: Enumerable<AttackWhereUniqueInput>
    delete?: Enumerable<AttackWhereUniqueInput>
    update?: Enumerable<AttackUpdateWithWhereUniqueWithoutProtectionsInput>
    updateMany?: Enumerable<AttackUpdateManyWithWhereWithoutProtectionsInput>
    deleteMany?: Enumerable<AttackScalarWhereInput>
  }

  export type AttackCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<AttackUncheckedCreateWithoutAuthorInput>, Enumerable<AttackCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<AttackCreateOrConnectWithoutauthorInput>
    connect?: Enumerable<AttackWhereUniqueInput>
  }

  export type ProtectionCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ProtectionUncheckedCreateWithoutAuthorInput>, Enumerable<ProtectionCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ProtectionCreateOrConnectWithoutauthorInput>
    connect?: Enumerable<ProtectionWhereUniqueInput>
  }

  export type AttackUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<AttackUncheckedCreateWithoutAuthorInput>, Enumerable<AttackCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<AttackCreateOrConnectWithoutauthorInput>
    connect?: Enumerable<AttackWhereUniqueInput>
  }

  export type ProtectionUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ProtectionUncheckedCreateWithoutAuthorInput>, Enumerable<ProtectionCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ProtectionCreateOrConnectWithoutauthorInput>
    connect?: Enumerable<ProtectionWhereUniqueInput>
  }

  export type AttackUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<AttackUncheckedCreateWithoutAuthorInput>, Enumerable<AttackCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<AttackCreateOrConnectWithoutauthorInput>
    upsert?: Enumerable<AttackUpsertWithWhereUniqueWithoutAuthorInput>
    connect?: Enumerable<AttackWhereUniqueInput>
    set?: Enumerable<AttackWhereUniqueInput>
    disconnect?: Enumerable<AttackWhereUniqueInput>
    delete?: Enumerable<AttackWhereUniqueInput>
    update?: Enumerable<AttackUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<AttackUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<AttackScalarWhereInput>
  }

  export type ProtectionUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ProtectionUncheckedCreateWithoutAuthorInput>, Enumerable<ProtectionCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ProtectionCreateOrConnectWithoutauthorInput>
    upsert?: Enumerable<ProtectionUpsertWithWhereUniqueWithoutAuthorInput>
    connect?: Enumerable<ProtectionWhereUniqueInput>
    set?: Enumerable<ProtectionWhereUniqueInput>
    disconnect?: Enumerable<ProtectionWhereUniqueInput>
    delete?: Enumerable<ProtectionWhereUniqueInput>
    update?: Enumerable<ProtectionUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<ProtectionUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<ProtectionScalarWhereInput>
  }

  export type AttackUncheckedUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<AttackUncheckedCreateWithoutAuthorInput>, Enumerable<AttackCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<AttackCreateOrConnectWithoutauthorInput>
    upsert?: Enumerable<AttackUpsertWithWhereUniqueWithoutAuthorInput>
    connect?: Enumerable<AttackWhereUniqueInput>
    set?: Enumerable<AttackWhereUniqueInput>
    disconnect?: Enumerable<AttackWhereUniqueInput>
    delete?: Enumerable<AttackWhereUniqueInput>
    update?: Enumerable<AttackUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<AttackUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<AttackScalarWhereInput>
  }

  export type ProtectionUncheckedUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ProtectionUncheckedCreateWithoutAuthorInput>, Enumerable<ProtectionCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ProtectionCreateOrConnectWithoutauthorInput>
    upsert?: Enumerable<ProtectionUpsertWithWhereUniqueWithoutAuthorInput>
    connect?: Enumerable<ProtectionWhereUniqueInput>
    set?: Enumerable<ProtectionWhereUniqueInput>
    disconnect?: Enumerable<ProtectionWhereUniqueInput>
    delete?: Enumerable<ProtectionWhereUniqueInput>
    update?: Enumerable<ProtectionUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<ProtectionUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<ProtectionScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type UserCreateWithoutAttacksInput = {
    email: string
    name?: string | null
    bio?: string | null
    protections?: ProtectionCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutAttacksInput = {
    id?: number
    email: string
    name?: string | null
    bio?: string | null
    protections?: ProtectionUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutattacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserUncheckedCreateWithoutAttacksInput, UserCreateWithoutAttacksInput>
  }

  export type ProtectionCreateWithoutAttacksInput = {
    title: string
    content?: string | null
    published?: boolean
    author?: UserCreateNestedOneWithoutProtectionsInput
  }

  export type ProtectionUncheckedCreateWithoutAttacksInput = {
    id?: number
    title: string
    content?: string | null
    published?: boolean
    authorId?: number | null
  }

  export type ProtectionCreateOrConnectWithoutattacksInput = {
    where: ProtectionWhereUniqueInput
    create: XOR<ProtectionUncheckedCreateWithoutAttacksInput, ProtectionCreateWithoutAttacksInput>
  }

  export type UserUpsertWithoutAttacksInput = {
    update: XOR<UserUncheckedUpdateWithoutAttacksInput, UserUpdateWithoutAttacksInput>
    create: XOR<UserUncheckedCreateWithoutAttacksInput, UserCreateWithoutAttacksInput>
  }

  export type UserUpdateWithoutAttacksInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    protections?: ProtectionUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateWithoutAttacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    protections?: ProtectionUncheckedUpdateManyWithoutAuthorInput
  }

  export type ProtectionUpsertWithWhereUniqueWithoutAttacksInput = {
    where: ProtectionWhereUniqueInput
    update: XOR<ProtectionUncheckedUpdateWithoutAttacksInput, ProtectionUpdateWithoutAttacksInput>
    create: XOR<ProtectionUncheckedCreateWithoutAttacksInput, ProtectionCreateWithoutAttacksInput>
  }

  export type ProtectionUpdateWithWhereUniqueWithoutAttacksInput = {
    where: ProtectionWhereUniqueInput
    data: XOR<ProtectionUncheckedUpdateWithoutAttacksInput, ProtectionUpdateWithoutAttacksInput>
  }

  export type ProtectionUpdateManyWithWhereWithoutAttacksInput = {
    where: ProtectionScalarWhereInput
    data: XOR<ProtectionUncheckedUpdateManyWithoutProtectionsInput, ProtectionUpdateManyMutationInput>
  }

  export type ProtectionScalarWhereInput = {
    AND?: Enumerable<ProtectionScalarWhereInput>
    OR?: Enumerable<ProtectionScalarWhereInput>
    NOT?: Enumerable<ProtectionScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    content?: StringNullableFilter | string | null
    published?: BoolFilter | boolean
    authorId?: IntNullableFilter | number | null
  }

  export type UserCreateWithoutProtectionsInput = {
    email: string
    name?: string | null
    bio?: string | null
    attacks?: AttackCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutProtectionsInput = {
    id?: number
    email: string
    name?: string | null
    bio?: string | null
    attacks?: AttackUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutprotectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserUncheckedCreateWithoutProtectionsInput, UserCreateWithoutProtectionsInput>
  }

  export type AttackCreateWithoutProtectionsInput = {
    title: string
    content?: string | null
    published?: boolean
    fine: string
    author?: UserCreateNestedOneWithoutAttacksInput
  }

  export type AttackUncheckedCreateWithoutProtectionsInput = {
    id?: number
    title: string
    content?: string | null
    published?: boolean
    authorId?: number | null
    fine: string
  }

  export type AttackCreateOrConnectWithoutprotectionsInput = {
    where: AttackWhereUniqueInput
    create: XOR<AttackUncheckedCreateWithoutProtectionsInput, AttackCreateWithoutProtectionsInput>
  }

  export type UserUpsertWithoutProtectionsInput = {
    update: XOR<UserUncheckedUpdateWithoutProtectionsInput, UserUpdateWithoutProtectionsInput>
    create: XOR<UserUncheckedCreateWithoutProtectionsInput, UserCreateWithoutProtectionsInput>
  }

  export type UserUpdateWithoutProtectionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    attacks?: AttackUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateWithoutProtectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    attacks?: AttackUncheckedUpdateManyWithoutAuthorInput
  }

  export type AttackUpsertWithWhereUniqueWithoutProtectionsInput = {
    where: AttackWhereUniqueInput
    update: XOR<AttackUncheckedUpdateWithoutProtectionsInput, AttackUpdateWithoutProtectionsInput>
    create: XOR<AttackUncheckedCreateWithoutProtectionsInput, AttackCreateWithoutProtectionsInput>
  }

  export type AttackUpdateWithWhereUniqueWithoutProtectionsInput = {
    where: AttackWhereUniqueInput
    data: XOR<AttackUncheckedUpdateWithoutProtectionsInput, AttackUpdateWithoutProtectionsInput>
  }

  export type AttackUpdateManyWithWhereWithoutProtectionsInput = {
    where: AttackScalarWhereInput
    data: XOR<AttackUncheckedUpdateManyWithoutAttacksInput, AttackUpdateManyMutationInput>
  }

  export type AttackScalarWhereInput = {
    AND?: Enumerable<AttackScalarWhereInput>
    OR?: Enumerable<AttackScalarWhereInput>
    NOT?: Enumerable<AttackScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    content?: StringNullableFilter | string | null
    published?: BoolFilter | boolean
    authorId?: IntNullableFilter | number | null
    fine?: StringFilter | string
  }

  export type AttackCreateWithoutAuthorInput = {
    title: string
    content?: string | null
    published?: boolean
    fine: string
    protections?: ProtectionCreateNestedManyWithoutAttacksInput
  }

  export type AttackUncheckedCreateWithoutAuthorInput = {
    id?: number
    title: string
    content?: string | null
    published?: boolean
    fine: string
  }

  export type AttackCreateOrConnectWithoutauthorInput = {
    where: AttackWhereUniqueInput
    create: XOR<AttackUncheckedCreateWithoutAuthorInput, AttackCreateWithoutAuthorInput>
  }

  export type ProtectionCreateWithoutAuthorInput = {
    title: string
    content?: string | null
    published?: boolean
    attacks?: AttackCreateNestedManyWithoutProtectionsInput
  }

  export type ProtectionUncheckedCreateWithoutAuthorInput = {
    id?: number
    title: string
    content?: string | null
    published?: boolean
  }

  export type ProtectionCreateOrConnectWithoutauthorInput = {
    where: ProtectionWhereUniqueInput
    create: XOR<ProtectionUncheckedCreateWithoutAuthorInput, ProtectionCreateWithoutAuthorInput>
  }

  export type AttackUpsertWithWhereUniqueWithoutAuthorInput = {
    where: AttackWhereUniqueInput
    update: XOR<AttackUncheckedUpdateWithoutAuthorInput, AttackUpdateWithoutAuthorInput>
    create: XOR<AttackUncheckedCreateWithoutAuthorInput, AttackCreateWithoutAuthorInput>
  }

  export type AttackUpdateWithWhereUniqueWithoutAuthorInput = {
    where: AttackWhereUniqueInput
    data: XOR<AttackUncheckedUpdateWithoutAuthorInput, AttackUpdateWithoutAuthorInput>
  }

  export type AttackUpdateManyWithWhereWithoutAuthorInput = {
    where: AttackScalarWhereInput
    data: XOR<AttackUncheckedUpdateManyWithoutAttacksInput, AttackUpdateManyMutationInput>
  }

  export type ProtectionUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ProtectionWhereUniqueInput
    update: XOR<ProtectionUncheckedUpdateWithoutAuthorInput, ProtectionUpdateWithoutAuthorInput>
    create: XOR<ProtectionUncheckedCreateWithoutAuthorInput, ProtectionCreateWithoutAuthorInput>
  }

  export type ProtectionUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ProtectionWhereUniqueInput
    data: XOR<ProtectionUncheckedUpdateWithoutAuthorInput, ProtectionUpdateWithoutAuthorInput>
  }

  export type ProtectionUpdateManyWithWhereWithoutAuthorInput = {
    where: ProtectionScalarWhereInput
    data: XOR<ProtectionUncheckedUpdateManyWithoutProtectionsInput, ProtectionUpdateManyMutationInput>
  }

  export type ProtectionUpdateWithoutAttacksInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneWithoutProtectionsInput
  }

  export type ProtectionUncheckedUpdateWithoutAttacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProtectionUncheckedUpdateManyWithoutProtectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttackUpdateWithoutProtectionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    fine?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneWithoutAttacksInput
  }

  export type AttackUncheckedUpdateWithoutProtectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
    fine?: StringFieldUpdateOperationsInput | string
  }

  export type AttackUncheckedUpdateManyWithoutAttacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: NullableIntFieldUpdateOperationsInput | number | null
    fine?: StringFieldUpdateOperationsInput | string
  }

  export type AttackUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    fine?: StringFieldUpdateOperationsInput | string
    protections?: ProtectionUpdateManyWithoutAttacksInput
  }

  export type AttackUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    fine?: StringFieldUpdateOperationsInput | string
  }

  export type ProtectionUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    attacks?: AttackUpdateManyWithoutProtectionsInput
  }

  export type ProtectionUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}